@startuml
'https://plantuml.com/class-diagram

'Modele'
package "MVC"{

    interface Sujet{
        +ajouterObservateur(Observateur)
        +supprimerObservateur(Observateur)
        +notifierObservateurs()
    }

    class Modele implements Sujet{
        - relation : Map<ClasseEntiere, ArrayList<Fleche>>
        - nomSelection : String
        - currentClickedClass : String
        + Modele()
        + afficherAttributs()
        + afficherConstructeurs()
        + afficherMethodes()
        + ajouterClasse(ClasseEntiere)
        + supprimerClasse(ClasseEntiere)
        + ajouterRelation(ClasseEntiere, Fleche)
        + getClasse(String) : Optional<ClasseEntiere>
        + getClasses() : Set<ClasseEntiere>
        + getCurrentClickedClass(): String
        + getRelations(ClasseEntiere) : ArrayList<Fleche>
        + supprimerClasse(ClasseEntiere)
        + ajouterObservateur(Observateur)
        + supprimerObservateur(Observateur)
        + notifierObservateurs()
    }

    'Observateurs'

    interface Observateur{
        +actualiser(Sujet)
    }

    class VueClasse implements Observateur{
        +HashMap<String, VueClasseAffichage>
        +VueClasse(Modele)
        +actualiser()
        +setBorderColor(ClasseAffichage)
    }

    class VueFleche implements Observateur{
        +VueFleche(Modele)
        +actualiser()
    }


    'Controlleurs'

    class ControllerButtonGeneral{
        +{static} attributGenerauxAffiche : boolean
        +{static} constructeurGenerauxAffiche : boolean
        +{static} methodeGenerauxAffiche : boolean
        +ControllerButon(Modele)
        +handle(ActionEvent)
    }

    class DeplacementClasseDragAndDropController {
        - model : Model
        + DeplacementClasseDragAndDropController(modele : Model)
        + handle(MouseEvent) : void
    }

    class ClasseEntiereClickedController{
        + ClasseEntiereClickedController(Modele)
        + addClickedEffect(ClasseAffichage)
        +handle(MouseEvent)
    }

    interface ClasseEntiereTitleIcon{
        getIcon() : Image
    }

    class AbstractClasseTitleIcon implements ClasseEntiereTitleIcon{
        +getIcon() : Image
    }

    class ClassEntiereTitleIcon implements ClasseEntiereTitleIcon{
        +getIcon() : Image
    }

    class InterfaceTitleIcon implements ClasseEntiereTitleIcon{
        +getIcon() : Image
    }

    class RecordTitleIcon implements ClasseEntiereTitleIcon{
        +getIcon() : Image
    }

}
'Classes'
class ClasseAffichage{
    -nom : String
    -definition : HBox
    -constructeur : Vbox
    -attributs : Vbox
    -methodes : Vbox
    +ClasseAffichage(String)
    +setDefinition(ClasseEntiere) : HBox
    +setConstructeur(ClasseEntiere) : Vbox
    +setAttributs(ClasseEntiere) : Vbox
    +setMethodes(ClasseEntiere) : Vbox
    +afficherClasse(ClasseEntiere)
    +getNom() : String
    +getDefinition() : HBox
    +getConstructeur() : Vbox
    +getAttributs() : Vbox
    +getMethodes() : Vbox
}


class ClasseEntiere{
    -ConstructeurEstAffiche : boolean
    -AttributEstAffiche : boolean
    -ConstructeurEstAffiche : boolean
    -MethodeEstAffiche : boolean
    +setAffichageConstructeurs()
    +setAffichageMethods()
    +setAffichageAttributs()
    +ClasseEntiere(path : String)
    +deplacer(int, int)
    +getAttributs() : ArrayList<Attribut>
    +getConstructeurs() : ArrayList<Constructeur>
    +getMethods() : ArrayList<Methode>
    +getDefinition() : DefinitionClasse
    +getNom() : String
    +getX() : int
    +getY() : int
    +isAttributEstAffiche(): boolean
    +isConstructeurEstAffiche(): boolean
    +isMethodsEstAffiche(): boolean
}

interface Entite{
    +getEntite() : String
}

class Classe implements Entite{
    +getEntite() : String
}

class Interface implements Entite{
    +getEntite() : String
}

class Enum implements Entite{
    +getEntite() : String
}

class Record implements Entite{
    +getEntite() : String
}



interface Accessibilite{
    +getAcces() : String
}

class Public implements Accessibilite{
    +getAcces() : String
}

class Private implements Accessibilite{
    +getAcces() : String
}

class Protected implements Accessibilite{
    +getAcces() : String
}

class Default implements Accessibilite{
    +getAcces() : String
}

interface Etat{
    +getEtat() : String
}

class Abstract implements Etat{
    +getEtat() : String
}

class Final implements Etat{
    +getEtat() : String
}

class Static implements Etat{
    +getEtat() : String
}

class DefinitionClasse{
    -nomClasse : String

    +DefinitionClasse(classe : Class<?>)
    +getNom() : String
    +getAccessibilite() : String
    +getEtat() : ArrayList<Etat>
    +getEntite() : String
}

class Attribut{
    -type : String
    -nom : String
    +Attribut(attr : Field)
    +getAccessibilite() : String
    +getEtat() : ArrayList<Etat>
    +getType() : String
    +getNom() : String
}

class Methode{
    -typeRetourne : String
    -nom : String

    +Methode(m : Method)
    +getNom() : String
    +getTypeRetourne() : String
    +getAccessibilite() : String
    +getEtat() : ArrayList<Etat>
    +getParametres() : ArrayList<Parametre>
}

class Constructeur {
    - nom : String
    + Constructeur(c : Constructor<?>)
    + getNom() : String
    + getAccessibilite() : String
    + getParametres() : ArrayList<Parametre>
}

class Parametre{
    +Parametre(param : Parameter)
    -type : String
    -nom : String
    +getType() : String
    +getNom() : String
}

class Point{
    - x : int
    - y : int
    + getX() : int
    + getY() : int
}

abstract class Relation {
    - nom : String

    + Relation(nom : String)
    + getNom() : String

    {abstract} + toString() : String
}

class Association extends Relation {
    - cardinalite1 : String
    - cardinalite2 : String

    + Association(nom : String, card1 : String, card2 : String)
    + getCardinalite1() : String
    + getCardinalite2() : String
    + toString() : String
}

class Heritage extends Relation {
    + Heritage(nom : String)
    + toString() : String
}

class Implementation extends Relation {
    + Implementation(nom : String)
    + toString() : String
}

class FabriqueAccessibilite {
    + FabriqueAccessibilite()
    + getAccessibilite(access : int) : Accessibilite
}

class FabriqueAffichage {
    + FabriqueAffichage(ClasseEntiere)
    + setAffichage():ClasseAffichage
    + {static}fabriqueAcces(String): String
    + {static}fabriqueIcon(): ClasseEntiereTitleIcon
}

class FabriqueEtat {
    + FabriqueEtat()
    + getEtat(modifiers : int) : ArrayList<Etat>
}

class FabriqueEntite {
    + FabriqueEntite()
    + getEntite(classe : Class<?>) : Entite
}


class Fleche {
    -EstAffiche : boolean
    +setAffichage()
}


'-----------------------------------'
'Associations'

Modele "1" --> "*" Observateur : -observateurs
VueClasse --> "0..1" Modele : - model
VueClasse --> VueFleche : - fleches
VueFleche --> "0..1" Modele : - model
VueArboressence --> "0..1" Modele : - model
Attribut "1" --> "0..1" Accessibilite : -accessibilite
Attribut "1" --> "*" Etat : -etats
DefinitionClasse "1" --> "0..1" Accessibilite : -accessibilite
DefinitionClasse "1" --> "0..*" Etat : -etats
DefinitionClasse "1" --> "0..1" Entite : -entite
Constructeur "1" --> "0..1" Accessibilite : -accessibilite
Constructeur "1" --> "*" Parametre : -parametres
Methode "1" --> "0..1" Accessibilite : -accessibilite
Methode "1" --> "*" Etat : etats
Methode "1" --> "*" Parametre : parametres
'ClasseEntiere <-- FabriqueAffichageClasse :-Classe
ClasseEntiere "1" --> "1" DefinitionClasse : definitionClasse
ClasseEntiere "1" --> "*" Attribut : attributs
ClasseEntiere "1" --> "*" Methode : methodes
ClasseEntiere "1" --> "*" Constructeur : constructeurs
ClasseEntiere "1" --> "1" Point : -coordonnees
ClasseEntiere "1" --> "*" Relation : -relations
Fleche "1" --> "1" Accessibilite : accessibilite
Fleche "2" *-- Point : pointDebutFin
ControllerButon "*" --> "1" Modele : -modele
DeplacementClasseDragAndDropController "*" --> "1" Modele : -modele
ClasseEntiereClickedController "*" --> "1" Modele : -modele
FabriqueAffichage --> "1" ClasseEntiere : -c


@enduml