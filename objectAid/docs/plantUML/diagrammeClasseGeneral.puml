@startuml
'https://plantuml.com/class-diagram

'Modele'

interface Sujet{
    +ajouterObservateur(Observateur)
    +supprimerObservateur(Observateur)
    +notifierObservateurs()
}

class Modele implements Sujet{

    +afficherAttributsTout()
    +afficherMethodesTout()
    +afficherAttributs(ClasseEntiere)
    +afficherMethodes(ClasseEntiere)
    +afficherFleches()
    +ajouterMethode(ClasseEntiere)
    +ajouterClasse(String)
    +getUml() : String
    +ajouterClasseRelation(ClasseEntiere)
    +ajouterFlecheRelation(ClasseEntiere,Fleche)



    +ajouterObservateur(Observateur)
    +supprimerObservateur(Observateur)
    +notifierObservateurs()

    +getRelation() : Relation

}

'Observateurs'

interface Observateur{
    +actualiser(Sujet)
}

class VueClasse implements Observateur{
    +VueClasse(Modele)
    +actualiser(Sujet)
}

class VueFleche implements Observateur{
    +VueFleche(Modele)
    +actualiser(Sujet)
}

class VueArboressence implements Observateur {
    + VueArboressence()
    + actualiser(Sujet)
}

'Controlleurs'

class ControleurBouton{
    +ControleurBouton(Modele)
    +handle(ActionEvent)
}

class ControleurDeplacer{
    +ControleurDeplacer(Modele)
    +handle(DragEvent)
}

class ControleurAjouter{
    +ControleurAjouter(Modele)
    +handle(DragEvent)
}

class ControleurSelectionner{
    +ControleurSelectionner(Modele)
    +handle(MouseEvent)
}

'Classes'

class FabriqueClasse{
    + FabriqueClasse()
    + fabriquer(path : String) : ClasseEntiere
}

abstract class FabriqueFleche{
    +FabriqueFleche()
    +{abstract}fabriquer() : Fleche
}

class FabriqueFlecheAssociation extends FabriqueFleche{
    +FabriqueFlecheAssociation()
    +fabriquer() : Fleche
}

class FabriqueFlecheImplementation extends FabriqueFleche{
    +FabriqueFlecheImplementation()
    +fabriquer() : Fleche
}

class FabriqueFlecheHeritage extends FabriqueFleche{
    +FabriqueFlecheAssociation()
    +fabriquer() : Fleche
}

class ClasseEntiere{
    +ClasseEntiere(path : String)
    +getAttributs() : ArrayList<Attribut>
    +getMethodes() : ArrayList<Methode>
    +getDefinition() : String
    +getNom() : String
    +getUml() : String
    +deplacer(int, int)
}

interface Entite{
    +getEntite() : String
}

class Classe implements Entite{
    +getEntite() : String
}

class Interface implements Entite{
    +getEntite() : String
}

class Enum implements Entite{
    +getEntite() : String
}

class Record implements Entite{
    +getEntite() : String
}

class Parametre{
    +Parametre(param : Parameter)
    -type : String
    -nom : String
    +getType() : String
    +getNom() : String
}

interface Accessibilite{
    +getAcces() : String
}

class Public implements Accessibilite{
    +getAcces() : String
}

class Private implements Accessibilite{
    +getAcces() : String
}

class Protected implements Accessibilite{
    +getAcces() : String
}

class Default implements Accessibilite{
    +getAcces() : String
}

interface Etat{
    +getEtat() : String
}

class Abstract implements Etat{
    +getEtat() : String
}

class Final implements Etat{
    +getEtat() : String
}

class Static implements Etat{
    +getEtat() : String
}

class DefinitionClasse{
    -nomClasse : String

    +DefinitionClasse(classe : Class<?>)
    +getNom() : String
    +getAccessibilite() : String
    +getEtat() : ArrayList<Etat>
    +getEntite() : String
}

class Attribut{
    -type : String
    -nom : String
    +Attribut(attr : Field)
    +getAccessibilite() : String
    +getEtat() : ArrayList<Etat>
    +getType() : String
    +getNom() : String
}

class Methode{
    -typeRetourne : String
    -nom : String

    +Methode(m : Method)
    +getNom() : String
    +getTypeRetourne() : String
    +getAccessibilite() : String
    +getEtat() : ArrayList<Etat>
    +getParametres() : ArrayList<Parametre>
}

class Constructeur {
    - nom : String
    + Constructeur(c : Constructor<?>)
    + getNom() : String
    + getAccessibilite() : String
    + getParametres() : ArrayList<Parametre>
}

abstract class Fleche {
    -nom : String
    -type : String

    +getNom() : String
    +getDebut() : Point
    +getFin() : Point
    +getType() : String
    +{abstract} getUml() : String
}

class FlecheHeritage extends Fleche {
    +getUml() : String
}

class FlecheAssociation extends Fleche {
    -cardinaliteDebut : String
    -cardinaliteFin : String
    +getUml() : String
}

class FlecheImplementation extends Fleche {
    +getUml() : String
}

class Point{
    - x : int
    - y : int
    + getX() : int
    + getY() : int
}

class Relation{
    +getFleches(ClasseEntiere) : ArrayList<Fleche>
    +getClasseEntiere(Fleche) : ClasseEntiere
}

'-----------------------------------'
'Associations'

Modele --> Observateur : -observateurs
Modele "1" --> "1" Relation : -relation
VueClasse --> "0..1" Modele : - sujet
VueFleche --> "0..1" Modele : - sujet
Attribut "1" --> "0..1" Accessibilite : -accessibilite
Attribut "1" --> "*" Etat : etat
DefinitionClasse "1" --> "0..1" Accessibilite : -accessibilite
DefinitionClasse "1" --> "0..*" Etat : -etat
DefinitionClasse "1" --> "0..1" Entite : -entite
Constructeur "1" --> "0..1" Accessibilite : -accessibilite
Constructeur "1" --> "*" Parametre : -parametres
Methode "1" --> "0..1" Accessibilite : -accessibilite
Methode "1" --> "*" Etat : etat
Methode "1" --> "*" Parametre : parametres
ClasseEntiere "1" --> "1" DefinitionClasse : definitionClasse
ClasseEntiere "1" --> "*" Attribut : attributs
ClasseEntiere "1" --> "*" Methode : methodes
ClasseEntiere "1" --> "*" Constructeur : constructeurs
Fleche "1" --> "1" Accessibilite : accessibilite
Fleche "2" *-- Point : pointDebutFin
ClasseEntiere "1" --> "*" Point : position
Relation "1" --> "*" Fleche : fleches
Relation "1" --> "*" ClasseEntiere : classes
ControleurBouton --> "0..1" Modele : -modele
ControleurDeplacer --> "0..1" Modele : -modele
ControleurSelectionner --> "0..1" Modele : -modele
ControleurAjouter --> "0..1" Modele : -modele
FabriqueFlecheAssociation -[dashed]-> FlecheAssociation
FabriqueFlecheImplementation -[dashed]-> FlecheImplementation
FabriqueFlecheHeritage -[dashed]-> FlecheHeritage
FabriqueClasse -[dashed]-> ClasseEntiere


@enduml